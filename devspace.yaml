version: v1beta10

# `vars` specifies variables which may be used as ${VAR_NAME} in devspace.yaml
vars:
- name: IMAGE
  value: ghcr.io/wavefrontset/workcalendar
- name: IMAGE_DEV
  value: ${IMAGE}_dev

images:
  app:
    image: ${IMAGE}
  appDev:
    image: ${IMAGE_DEV}
    build:
      docker:
        options:
          target: development
      
# `deployments` tells DevSpace how to deploy this project
deployments:
- name: database
  helm:
    chart:
      name: bitnami/postgresql
    values:
      image:
        tag: "11.12.0"
      postgresqlDatabase: "db_workcalendar"
      postgresqlUsername: "workcalendar"
      postgresqlPassword: ${DB_PASSWORD}
- name: workcalendar
  # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
  helm:
    # We are deploying the so-called Component Chart: https://devspace.sh/component-chart/docs
    componentChart: true
    # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
    # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
    values:
      containers:
      - image: ${IMAGE} # Use the value of our `${IMAGE}` variable here (see vars above)
        env:
        - name: DB_HOST
          value: "database-postgresql"
        - name: DB_NAME
          value: "db_workcalendar"
        - name: DB_USER
          value: "workcalendar"
        - name: DB_PASSWORD
          value: ${DB_PASSWORD}
      service:
        ports:
        - port: 5000

hooks:
# Wait for the database container to be up before deploying the app
- wait:
    running: true
  where:
    container:
      labelSelector:
        app.kubernetes.io/name: postgresql
  when:
    before:
      deployments: workcalendar

# `dev` only applies when you run `devspace dev`
dev:
  # `dev.ports` specifies all ports that should be forwarded while `devspace dev` is running
  # Port-forwarding lets you access your application via localhost on your local machine
  ports:
  - imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
    forward:
    - port: 5000

  # `dev.open` tells DevSpace to open certain URLs as soon as they return HTTP status 200
  # Since we configured port-forwarding, we can use a localhost address here to access our application
  open:
  - url: http://localhost:5000

  # `dev.sync` configures a file sync between our Pods in k8s and your local project files
  sync:
  - imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
    excludePaths:
    - .git/
    - __pycache__/
    - .coverage
    - .pytest_cache/

  # Since our Helm charts and manifests deployments are often optimized for production,
  # DevSpace let's you swap out Pods dynamically to get a better dev environment
  replacePods:
  - imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
    # Since the `${IMAGE}` used to start our main application pod may be distroless or not have any dev tooling, let's replace it with a dev-optimized image
    # DevSpace provides a sample image here but you can use any image for your specific needs
    replaceImage: ${IMAGE_DEV}

  logs:
    showLast: 200
    sync: true
    disabled: false
    selectors:
    - labelSelector:
        app.kubernetes.io/component: workcalendar

# `profiles` lets you modify the config above for different environments (e.g. dev vs production)
profiles:
  # This profile is called `production` and you can use it for example using: devspace deploy -p production
  # We generally recommend to use the base config without any profiles as optimized for development (e.g. image build+push is disabled)
- name: production
# This profile adds our image to the config so that DevSpace will build, tag and push our image before the deployment
  merge:
    images:
      app:
        image: ${IMAGE} # Use the value of our `${IMAGE}` variable here (see vars above)
        dockerfile: ./Dockerfile

commands:
- name: lint
  command: "echo 'black --check . && flake8' | devspace enter -l app.kubernetes.io/component=workcalendar"
- name: test
  command: "devspace enter pytest -l app.kubernetes.io/component=workcalendar"
- name: testloop
  command: "echo 'pytest --looponfail' | devspace enter -l app.kubernetes.io/component=workcalendar"
